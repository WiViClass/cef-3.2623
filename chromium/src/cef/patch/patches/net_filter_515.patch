diff --git base/network_delegate.h base/network_delegate.h
index 0737137..60cfcd717 100644
--- base/network_delegate.h
+++ base/network_delegate.h
@@ -35,6 +35,7 @@ namespace net {
 // of net/base here, because we have a net_base library. Forward declarations
 // are ok.
 class CookieOptions;
+class Filter;
 class HttpRequestHeaders;
 class HttpResponseHeaders;
 class ProxyInfo;
@@ -119,6 +120,13 @@ class NET_EXPORT NetworkDelegate : public base::NonThreadSafe {
       const GURL& target_url,
       const GURL& referrer_url) const;
 
+  // Optionally add a new filter to the filter list. Returns the first filter in
+  // the list.
+  virtual Filter* SetupFilter(URLRequest* request,
+                              Filter* filter_list) {
+    return filter_list;
+  }
+
  private:
   // This is the interface for subclasses of NetworkDelegate to implement. These
   // member functions will be called by the respective public notification
diff --git filter/filter.h filter/filter.h
index e9df3db..768b7fc 100644
--- filter/filter.h
+++ filter/filter.h
@@ -59,6 +59,7 @@
 #include "net/base/net_export.h"
 #include "net/base/sdch_manager.h"
 
+class CefNetworkDelegate;
 class GURL;
 
 namespace net {
@@ -234,6 +235,7 @@ class NET_EXPORT_PRIVATE Filter {
   std::string OrderedFilterList() const;
 
  protected:
+  friend class ::CefNetworkDelegate;
   friend class BrotliUnitTest;
   friend class GZipUnitTest;
   friend class SdchFilterChainingTest;
diff --git url_request/url_request_job.cc url_request/url_request_job.cc
index 55a4f51..937f163 100644
--- url_request/url_request_job.cc
+++ url_request/url_request_job.cc
@@ -447,6 +447,9 @@ void URLRequestJob::NotifyHeadersComplete() {
   if (request_->status().is_success())
     filter_.reset(SetupFilter());
 
+  if (network_delegate_)
+    filter_.reset(network_delegate_->SetupFilter(request_, filter_.release()));
+
   if (!filter_.get()) {
     std::string content_length;
     request_->GetResponseHeaderByName("content-length", &content_length);
